1.  What is the proposed package's name?   

ShyLU

 2.  What is the purpose for the package?   

ShyLU is a algebraic preconditioner package for general sparse linear
systems on the node. ShyLU can also be used as a solver. It is designed
for medium sized problems that can be solved on a single node
although it will also work across nodes.
 
The default preconditioner in ShyLU is based on block partitioning and
Schur complements and is typically used as a hybrid direct-iterative method
(though it can also be used as a purely direct or iterative method).
ShyLU uses a two-level hybrid parallel programming model (MPI + Threads) to 
effectively use current multicore and emerging manycore systems.

ShyLU is intended both as a subdomain solver or smoother for production use,
and as a research platform for algorithmic research in hybrid solvers,
Schur complement preconditioners and possibly other parallel algebraic
preconditioners on the node.

 3.  Why should this functionality not just be included in an existing 
Trilinos package?  

ShyLU could be part of Ifpack as it is an algebraic preconditioner. However, 
we believe it should be a separate package for several reasons:

(a) We envision the scope of ShyLU is different from the scope of
Ifpack/Ifpack2. Ifpack/Ifpack2 is typically "on-the-core" preconditioners while
ShyLU's scope is a manycore node. On the other end of this spectrum we see
ML/MueLU. As an example, ShyLU can use Ifpack preconditioners within itself and
ShyLU can be used within ML as a smoother.
While it can be argued, the domain decomposition + ILU in Ifpack
can be used for the node (by running one MPI task per core), this
ignores all the remote entries and works on just the local entries 
for each core. ShyLU will be a true node level preconditioner.
(b) ShyLU has more dependencies than Ifpack. It will create circular 
dependencies in Ifpack/Ifpack2 and within the solvers. (see below)
(c) ShyLU can be used as both preconditioner and as a direct solver; thus
    we plan wrappers in both Ifpack and Amesos.
(d) ShyLU is fairly large: 2K lines of source and still growing.

 4.  What required and optional internal Trilinos packages dependencies will 
this code have? 

ShyLU depends on: Epetra, EpetraExt, Isorropia, Zoltan, Teuchos, Amesos.
ShyLU can use:    AztecOO, Belos.
Future "can use": Tpetra, Kokkos, Ifpack(2).
Packages that can use ShyLU: ML, Ifpack, and any package that uses Ifpack

 5. What required and optional external TPL dependencies will this code have?  

Required TPL: None.
Optional TPL: MPI, solver TPLs in Amesos.

 6.  Will this be immediately considered Stable code or Experimental Code?  

This code should be stable code by the time it is externally released.

 7.  What is the long term development, support, and maintenance plan for 
the new package going to be?  

The code will be developed/maintained long-term as part of Sandia's
programs in architecture-aware algorithms and exascale solvers.

    *   Who is going to maintain this package?   

Siva Rajamanickam and Erik Boman are the package leads and will
maintain the package.

    *   Will this package be released and when?  

Yes, the package will first be released internally in preCopyrightTrilinos.
It will be released externally as soon as copyright has been granted.

    *   If the package is released outside of Sandia, who is going to maintain 
it long term?  

During the research phase, the current developers will maintain it. 
Longer term, maintainance should be provided by Trilinos SEMS staff.

